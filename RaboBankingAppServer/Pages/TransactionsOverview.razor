@page "/transactions/list/{currentPage:int?}"
@using Microsoft.EntityFrameworkCore;
@using RaboBankingAppServer.Entities;
@inject IDbContextFactory<DataContext> ContextFactory
@inject NavigationManager NavigationManager

<PageTitle>Transactions</PageTitle>

<h1>Transactions</h1>

@if (Transactions is null)
{
    <div>Loading...</div>
}
else
{
    <ul class="pagination mt-3">
        <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
            <a class="page-link" href="/transactions/list/@(CurrentPage - 1)">Previous</a>
        </li>
        @for (int i = 1; i <= TotalPages; i++)
        {
            <li class="page-item @(CurrentPage == i ? "active" : "")">
                <a class="page-link" href="/transactions/list/@i">@i</a>
            </li>
        }
        <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
            <a class="page-link" href="/transactions/list/@(CurrentPage + 1)">Next</a>
        </li>
    </ul>

    <div class="accordion" id="myAccordion">
        <div class="accordion-item">
            <div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#myAccordion">
                <div class="accordion-body">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Account</th>
                                <th>Amount</th>
                                <th>Date</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < Transactions.Count(); i++)
                            {
                                var categoryname = Categories?.First(c => c.Id == Transactions[i].CategoryId).Name;
                                <tr data-bs-toggle="collapse" data-bs-target="#row@(i)-collapse" aria-expanded="false" aria-controls="row@(i)-collapse">
                                    @if (Transactions[i].IncomingTransaction == true)
                                    {
                                        <td>@Transactions[i].FromAccount.Name</td>
                                    }
                                    else
                                    {
                                        <td>@Transactions[i].ToAccount.Name</td>
                                    }
                                    <td>@Transactions[i].Amount</td>
                                    <td>@DateOnly.FromDateTime(Transactions[i].Date)</td>
                                </tr>


                                <tr id="row@(i)-collapse" class="collapse">
                                    <td colspan="3">
                                        <div>
                                            <ul>
                                                <li><a>Description: @Transactions[i].Description  </a></li>
                                                <li><a>Account amount: @Transactions[i].BalanceAfterBooking </a></li>
                                                <li><a>Category: @categoryname </a></li>
                                                <li><a>Carbon Footprint: @Transactions[i].CarbonFootPrint </a></li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <ul class="pagination mt-3">
        <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
            <a class="page-link" href="/transactions/list/@(CurrentPage - 1)">Previous</a>
        </li>
        @for (int i = 1; i <= TotalPages; i++)
        {
            <li class="page-item @(CurrentPage == i ? "active" : "")">
                <a class="page-link" href="/transactions/list/@i">@i</a>
            </li>
        }
        <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
            <a class="page-link" href="/transactions/list/@(CurrentPage + 1)">Next</a>
        </li>
    </ul>


}

@code {
    [Parameter]
    public int? CurrentPage { get; set; }
    private List<Transaction>? Transactions { get; set; }
    private List<Category>? Categories { get; set; }
    private int TotalPages { get; set; }
    private const int ItemsPerPage = 20;
    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        if (CurrentPage is null or < 1)
        {
            NavigationManager.NavigateTo("/transactions/list/1");
            return;
        }

        using var context = ContextFactory.CreateDbContext();

        var transactionsCount = await context.Transactions.CountAsync();
        TotalPages = transactionsCount == 0 ? 1 : (int)Math.Ceiling((double)transactionsCount / ItemsPerPage);

        if (CurrentPage > TotalPages)
        {
            NavigationManager.NavigateTo($"/transactions/list/{TotalPages}");
            return;
        }

        var itemsToSkip = (CurrentPage.Value - 1) * ItemsPerPage;

        Transactions = await context.Transactions
            .Include(t => t.FromAccount)
            .Include(t => t.ToAccount)
            .OrderByDescending(t => t.Date)
            .Skip(itemsToSkip)
            .Take(ItemsPerPage)
            .ToListAsync();

        Categories = await context.Categories
            .OrderBy(t => t.Id)
            .ToListAsync();
    }

    private async Task HandleDelete(Transaction transaction)
    {
        using var context = ContextFactory.CreateDbContext();
        context.Transactions.Remove(transaction);
        await context.SaveChangesAsync();

        await LoadData();

    }
}

@*<script type="text/javascript">
    $(document).ajaxComplete(funcion(){
        $(".accordion-body table tbody").each(function(){
            if ($(this).text() == "") {
                $(this).parent().parent().parent().parent().hide();
            }
    
        });
    });
</script>*@
